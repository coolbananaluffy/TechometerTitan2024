from hub import light_matrix, motion_sensor, port
import runloop
import motor_pair
from app import display
import motor
import color_matrix

# declare constants
ROTATION_TO_CM = 28 #17.2787595947
ROTATION_TO_INCH = 11 #7
WHEELRIGHTPORT= port.F
WHEELLEFTPORT = port.B
FRONTATTACMENTPORT = port.A
REARATTACHMENTPORT = port.E
TURNFACTOR = 1.66


#####################################################################
# Method to convert distance from inch to rotation degrees on motor
#####################################################################
def convertcmToDegree(cm):
    return int(360/( ROTATION_TO_CM ) * cm )


#####################################################################
# convert distance from inch to rotation degrees on motor
#####################################################################
def convertInchToDegree(inch):
    return int ( ( 360 / ROTATION_TO_INCH ) * inch)
#####################################################################
# convert actual degree to motor specification
#####################################################################
def turnDegree(angle):
    return int(( TURNFACTOR ) * angle )



#####################################################################
# Main code
#####################################################################
async def main():
    # Set Motor pair1
    motor_pair.pair(motor_pair.PAIR_1, WHEELRIGHTPORT, WHEELLEFTPORT)

    await motor_pair.move_tank_for_degrees(0,convertcmToDegree(20), 500, 500)

    await motor_pair.move_tank_for_degrees(0, turnDegree(90), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0,convertcmToDegree(46), 500, 500)
 
    await motor_pair.move_tank_for_degrees(0, turnDegree(-90), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0,convertcmToDegree(20 ), 200, 200)
#Krill 1
    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(-10), 500 , 500)

    
    await motor_pair.move_tank_for_degrees(0, turnDegree(-90), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(37), 500 , 500)

    await motor_pair.move_tank_for_degrees(0, turnDegree(85), 200, -200)
    runloop.sleep_ms(1000)
#Krill 2
    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(52), 500 , 500)


    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(-6.9), 500 , 500)


    await motor_pair.move_tank_for_degrees(0, turnDegree(70), 200, -200)
    runloop.sleep_ms(1000)


    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(30), 500 , 500)



    await motor_pair.move_tank_for_degrees(0, turnDegree(24), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(93), 500 , 500)
#Krill 3
    await motor_pair.move_tank_for_degrees(0, turnDegree(-35), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(10), 500 , 500)



#Krill 4
    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(-6), 500 , 500)


    await motor_pair.move_tank_for_degrees(0, turnDegree(120), 200, -200)
    runloop.sleep_ms(1000)



    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(6), 500 , 500)
 
    await motor_pair.move_tank_for_degrees(0, turnDegree(-10), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(6), 500 , 500)

    await motor_pair.move_tank_for_degrees(0, turnDegree(-45), 200, -200)
    runloop.sleep_ms(1000)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(10), 500 , 500)

    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(-20), 500 , 500)

    await motor_pair.move_tank_for_degrees(0, turnDegree(-45), 200, -200)
    runloop.sleep_ms(1000)


    await motor_pair.move_tank_for_degrees(0, convertcmToDegree(50), 500 , 500)






runloop.run(main())
